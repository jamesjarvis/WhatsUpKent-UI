{"version":3,"sources":["interface/utils.tsx","interface/api.tsx","components/Contexts/FilterContext.tsx","components/Filter/Filter.tsx","components/EventView/EventView.tsx","components/Calendar/Calendar.tsx","components/CalendarWrapper/CalendarWrapper.tsx","pages/MainView/MainView.tsx","components/Header/Header.tsx","interface/theme.tsx","components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getSundayDate","d","tempd","Date","setHours","setMinutes","setSeconds","day","getDay","diff","getDate","setDate","getEndOfWeek","spaceSeparatedList","as","temp","forEach","s","value","commaSeparatedStrings","i","length","formatTime","minutes","String","getMinutes","getHours","padStart","API_URL","f","a","moduleCodes","subjects","eventTerms","eventTypes","query","startDate","toISOString","split","endDate","axios","post","headers","response","body","data","events","Array","filteredWeekView","mod","tempMod","code","name","subject","event","tempEvent","module","push","thing","includes","ActionType","defaultFilter","reducer","state","action","type","UPDATE","payload","init","initialFilter","FilterContext","createContext","FilterView","useContext","filterState","dispatch","useState","availableEventTypes","setAvailableEventTypes","useEffect","tempSelectTypes","val","label","formatEventTypes","availableSubjectTypes","setAvailableSubjectTypes","getAllSubjects","then","tempSubTypes","formatSubjectTypes","className","onChange","selectedOption","options","placeholder","isMulti","EventView","fontSize","title","start","end","startString","toDateString","timeString","formatDateRangeString","Link","href","location","id","target","rel","description","map","index","rand","Math","random","key","localiser","momentLocalizer","moment","MyCalendar","eventList","React","anchorEl","setAnchorEl","open","Boolean","undefined","selectedEvent","setSelectedEvent","currentDate","now","am","pm","localizer","startAccessor","endAccessor","views","defaultView","scrollToTime","min","max","onRangeChange","range","date","onSelectEvent","e","currentTarget","handleClick","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","CalendarWrapper","setEvents","getFilteredThisWeekExact","result","tempEvents","allDay","MainView","useReducer","Provider","Header","AppBar","position","Toolbar","Typography","variant","Tooltip","placement","IconButton","createMuiTheme","palette","primary","main","secondary","Footer","gutterBottom","App","theme","exact","path","component","to","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6512dfac.chunk.js","sourcesContent":["export function getSundayDate(d: Date): Date {\n  const tempd = new Date(d);\n  tempd.setHours(5);\n  tempd.setMinutes(0);\n  tempd.setSeconds(0);\n  const day = tempd.getDay();\n  const diff = tempd.getDate() - day;\n  return new Date(tempd.setDate(diff));\n}\n\nexport function getEndOfWeek(d: Date): Date {\n  const tempd = new Date(d);\n  tempd.setHours(5);\n  tempd.setMinutes(0);\n  tempd.setSeconds(0);\n  const day = tempd.getDay();\n  const diff = tempd.getDate() + (6 - day);\n  return new Date(tempd.setDate(diff));\n}\n\nexport function spaceSeparatedList(as: Array<SelectValueType>): string {\n  let temp = '';\n  as.forEach((s) => {\n    temp = `${temp + s.value} `;\n  });\n  return temp;\n}\n\nexport function commaSeparatedStrings(as: Array<SelectValueType>): string {\n  let temp = '';\n  for (let i = as.length - 1; i >= 0; i -= 1) {\n    temp = `${temp}\"${as[i].value}\"`;\n    if (i !== 0) {\n      temp = `${temp},`;\n    }\n  }\n  return temp;\n}\n\nfunction formatTime(d: Date): string {\n  const minutes = String(d.getMinutes());\n  return `${d.getHours()}:${minutes.padStart(2, '0')}`;\n}\n\nexport function formatDateRangeString(start: Date | undefined, end: Date | undefined): string {\n  if (!start || !end) {\n    return '';\n  }\n  const startString = start.toDateString();\n  const timeString = `${formatTime(start)} - ${formatTime(end)}`;\n  return `${startString} ⋅ ${timeString}`;\n}\n\nexport interface SelectValueType {\n  label: string;\n  value: string;\n}\nexport interface Filter {\n  startDate: Date;\n  endDate: Date;\n  subjects: Array<SelectValueType>;\n  eventTypes: Array<SelectValueType>;\n}\n","import axios from 'axios';\nimport {\n  getSundayDate, Filter, spaceSeparatedList, commaSeparatedStrings,\n} from './utils';\nimport { DBEvent, Module } from './db-types';\n\nconst API_URL = 'https://api.whatsupkent.com/';\n\nexport async function getAllThisWeek(d: Date): Promise<DBEvent[] | null> {\n  const sundayDate = getSundayDate(d);\n  const saturdayDate = new Date(sundayDate);\n  saturdayDate.setDate(sundayDate.getDate() + 6);\n  const query = `\n  {\n    weekView(func: has(event.title), orderasc: event.start_date) @filter(gt(event.start_date,${sundayDate.toISOString().split('T')[0]}) and le(event.end_date, ${saturdayDate.toISOString().split('T')[0]})){\n      id: event.id\n      startDate: event.start_date\n      endDate: event.end_date\n      title: event.title\n      description: event.description\n      location: event.location {\n        id: location.id\n        name: location.name\n        disabledAccess: location.disabled_access\n      }\n      organiser: event.organiser {\n        name: person.name\n        email: person.email\n      }\n      module: event.part_of_module {\n        code: module.code\n        name: module.name\n        subject: module.subject\n      }\n    }\n  }\n  `;\n  try {\n    const response = await axios.post(API_URL, query);\n    const body: {weekView: Array<DBEvent>} = response.data;\n    return body.weekView;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getFilteredThisWeekExact(f: Filter): Promise<DBEvent[] | null> {\n  const moduleCodes = f.subjects.length > 0 ? `@filter(eq(module.subject, [${commaSeparatedStrings(f.subjects)}]))` : '';\n  const eventTerms = f.eventTypes.length > 0 ? `and anyofterms(event.title, \"${spaceSeparatedList(f.eventTypes)}\")` : '';\n  const query = `\n{filteredWeekView(func: has(module.subject), orderasc: module.subject, orderasc: module.code, first: 2000) ${moduleCodes}{\ncode: module.code\nsubject: module.subject\nname: module.name\nevents: ~event.part_of_module @filter(gt(event.start_date,${f.startDate.toISOString().split('T')[0]}) and le(event.end_date, ${f.endDate.toISOString().split('T')[0]}) ${eventTerms}) {\n  id: event.id\n  title: event.title\n  description: event.description\n  startDate: event.start_date\n  endDate: event.end_date\n  location: event.location {\n    name: location.name\n    id: location.id\n    disabledAccess: location.disabled_access\n}}}}\n  `;\n  try {\n    const response = await axios.post(API_URL, query, { headers: { 'Content-Type': 'application/json' } });\n    const body: {filteredWeekView: Array<Module>} = response.data;\n    const events = new Array<DBEvent>();\n    body.filteredWeekView.forEach((mod: Module) => {\n      if (mod.events) {\n        const tempMod: Module = {\n          code: mod.code,\n          name: mod.name,\n          subject: mod.subject,\n        };\n        mod.events.forEach((event) => {\n          const tempEvent = event;\n          tempEvent.module = [tempMod];\n          events.push(tempEvent);\n        });\n      }\n    });\n    return events;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getAllModules(): Promise<Module[] | null> {\n  const query = `\n  {\n    modules(func: has(module.subject), orderasc: module.subject, orderasc: module.code) {\n      subject: module.subject\n      code: module.code\n      name: module.name\n    }\n  }\n  `;\n  try {\n    const response = await axios.post(API_URL, query, { headers: { 'Content-Type': 'application/json' } });\n    const body: {modules: Array<Module>} = response.data;\n    return body.modules;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getAllSubjects(): Promise<string[] | null> {\n  const query = `\n  {subjects(func: has(module.subject), orderasc: module.subject, first: 4000){subject: module.subject}}`;\n  try {\n    const response = await axios.post(API_URL, query, { headers: { 'Content-Type': 'application/json' } });\n    const body: {subjects: Array<{subject: string}>} = response.data;\n    const temp = new Array<string>();\n    body.subjects.forEach((thing) => {\n      if (!temp.includes(thing.subject)) {\n        temp.push(thing.subject);\n      }\n    });\n    return temp;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport function getAllLectureTypes(): Array<string> {\n  return ['LECTURE', 'SEMINAR', 'PRESENTATION', 'LAB', 'INDUCTION', 'PC', 'WORKSHOP', 'BOOKING', 'MEETING', 'PERFORMANCE', 'SCREENING', 'LECSEM', 'FIELDTRIP'];\n}\n","import React, { createContext } from 'react';\nimport {\n  getSundayDate, getEndOfWeek, Filter, SelectValueType,\n} from '../../interface/utils';\n\nexport const defaultFilter: Filter = {\n  startDate: getSundayDate(new Date()),\n  endDate: getEndOfWeek(new Date()),\n  subjects: new Array<SelectValueType>(),\n  eventTypes: new Array<SelectValueType>(),\n};\n\nexport enum ActionType {\n  UPDATE,\n}\n\ninterface ReducerType {\n  payload: Filter;\n  type: ActionType;\n}\n\nexport const reducer = (state = defaultFilter, action: ReducerType) => {\n  switch (action.type) {\n    case ActionType.UPDATE:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport function init(initialFilter: Filter) {\n  return initialFilter;\n}\n\nconst FilterContext: React.Context<any> = createContext(defaultFilter);\n\nexport default FilterContext;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Select from 'react-select';\nimport { getAllLectureTypes, getAllSubjects } from '../../interface/api';\nimport { Filter } from '../../interface/utils';\nimport './Filter.scss';\nimport FilterContext, { ActionType } from '../Contexts/FilterContext';\n\ninterface SelectType {\n  value: string;\n  label: string;\n}\n\ninterface GroupedSelectType {\n  label: string;\n  options: Array<SelectType>;\n}\n\nfunction formatEventTypes(eventTypes: Array<string>): Array<SelectType> {\n  const tempSelectTypes = new Array<SelectType>();\n  eventTypes.forEach((val) => {\n    tempSelectTypes.push({ value: val, label: val });\n  });\n  return tempSelectTypes;\n}\n\n/**\n * formatSubjectTypes formats the module database objects into the select types\n *\n * @param modules Information about all modules associated with the events\n */\nfunction formatSubjectTypes(subjects: Array<string>): Array<SelectType> {\n  const tempSubTypes = new Array<SelectType>();\n  subjects.forEach((val) => {\n    tempSubTypes.push({ value: val, label: val });\n  });\n  return tempSubTypes;\n}\n\nconst FilterView: React.FC = () => {\n  const { filterState, dispatch } = useContext(FilterContext);\n\n  const [availableEventTypes, setAvailableEventTypes] = useState();\n  useEffect(() => {\n    setAvailableEventTypes(formatEventTypes(getAllLectureTypes()));\n  }, []);\n\n  const handleTypeChange = (selectedOption: any) => {\n    const temp: Filter = {\n      startDate: filterState.startDate,\n      endDate: filterState.endDate,\n      subjects: filterState.subjects,\n      eventTypes: selectedOption || [],\n    };\n    dispatch({ type: ActionType.UPDATE, payload: temp });\n  };\n\n\n  const [availableSubjectTypes, setAvailableSubjectTypes] = useState();\n  useEffect(() => {\n    getAllSubjects().then((data) => {\n      if (data) {\n        setAvailableSubjectTypes(formatSubjectTypes(data));\n      }\n    });\n  }, []);\n\n\n  const handleSubjectChange = (selectedOption: any) => {\n    const temp: Filter = {\n      startDate: filterState.startDate,\n      endDate: filterState.endDate,\n      subjects: selectedOption || [],\n      eventTypes: filterState.eventTypes,\n    };\n    dispatch({ type: ActionType.UPDATE, payload: temp });\n  };\n\n  return (\n    <div className=\"filterView\">\n      <span>Show me</span>\n      <Select value={filterState.eventTypes} onChange={handleTypeChange} options={availableEventTypes} className=\"selector\" placeholder=\"All\" isMulti />\n      <span>events for</span>\n      <Select value={filterState.subjects} onChange={handleSubjectChange} options={availableSubjectTypes} className=\"selector\" placeholder=\"All subjects\" isMulti />\n    </div>\n  );\n};\n\nexport default FilterView;\n","import React, { Fragment } from 'react';\nimport SubjectOutlinedIcon from '@material-ui/icons/SubjectOutlined';\nimport RoomOutlinedIcon from '@material-ui/icons/RoomOutlined';\nimport EventOutlinedIcon from '@material-ui/icons/EventOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport Link from '@material-ui/core/Link';\nimport { MyEvent } from '../../interface/db-types';\nimport { formatDateRangeString } from '../../interface/utils';\nimport './EventView.scss';\n\ninterface EventViewProps {\n  event: MyEvent | null;\n}\n\nfunction newlineToBreak(s: string | undefined): JSX.Element[] {\n  if (s) {\n    return s.split('\\\\n').map((value, index) => {\n      const rand = Math.random() * 100 * index;\n      return (\n        <Fragment key={rand}>\n          {value}\n          <br />\n        </Fragment>\n      );\n    });\n  }\n  return [];\n}\n\nconst EventView: React.FC<EventViewProps> = ({ event }) => (\n  <div className=\"eventHolder\">\n    <div className=\"eventSection\">\n      <div className=\"eventSectionIcon\">\n        <InfoOutlinedIcon fontSize=\"small\" />\n      </div>\n      <div className=\"eventSectionDeepdive\">\n        <span className=\"bold1\">\n          {event && event.title}\n        </span>\n        <span className=\"quiet1\">\n          {event && event.module && event.module[0].name}\n        </span>\n        <span className=\"quiet2\">\n          {event && event.module && event.module[0].subject}\n        </span>\n      </div>\n    </div>\n    <div className=\"eventSection\">\n      <div className=\"eventSectionIcon\">\n        <EventOutlinedIcon fontSize=\"small\" />\n      </div>\n      <div className=\"eventSectionDeepdive\">\n        <span className=\"quiet1\">\n          {event && formatDateRangeString(event.start, event.end)}\n        </span>\n      </div>\n    </div>\n    <div className=\"eventSection\">\n      <div className=\"eventSectionIcon\">\n        <RoomOutlinedIcon fontSize=\"small\" />\n      </div>\n      <div className=\"eventSectionDeepdive\">\n        <span className=\"quiet1\">\n          <Link\n            href={`http://www.kent.ac.uk/timetabling/rooms/room.html?room=${event && event.location && event.location[0].id}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {event && event.location && event.location[0].id}\n          </Link>\n        </span>\n        <span className=\"quiet2\">\n          {event && event.location && event.location[0].name}\n        </span>\n      </div>\n    </div>\n    <div className=\"eventSection\">\n      <div className=\"eventSectionIcon\">\n        <SubjectOutlinedIcon fontSize=\"small\" />\n      </div>\n      <div className=\"eventSectionDeepdive\">\n        <div>\n          {event && newlineToBreak(event.description)}\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default EventView;\n","import {\n  Calendar, momentLocalizer, Event,\n} from 'react-big-calendar';\nimport React, { useContext, useState } from 'react';\nimport moment from 'moment';\nimport Popover from '@material-ui/core/Popover';\nimport './Calendar.scss';\nimport FilterContext, { ActionType } from '../Contexts/FilterContext';\nimport { Filter, getSundayDate, getEndOfWeek } from '../../interface/utils';\nimport EventView from '../EventView/EventView';\nimport { MyEvent } from '../../interface/db-types';\n\nconst localiser = momentLocalizer(moment);\n\ninterface MyCalendarProps {\n  eventList: Event[];\n}\n\nconst MyCalendar: React.FC<MyCalendarProps> = ({ eventList }) => {\n  const { filterState, dispatch } = useContext(FilterContext);\n  const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n  const handleClick = (event: React.SyntheticEvent<HTMLElement>): void => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (): void => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  const [selectedEvent, setSelectedEvent] = useState<MyEvent | null>(null);\n\n  const currentDate = new Date(Date.now());\n  const am = new Date(Date.now());\n  am.setMinutes(0);\n  am.setSeconds(0);\n  am.setHours(7);\n  const pm = new Date(am);\n  pm.setHours(22);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const dateChange = (range: any): void => {\n    const temp: Filter = {\n      startDate: filterState.startDate,\n      endDate: filterState.endDate,\n      subjects: filterState.subjects,\n      eventTypes: filterState.eventTypes,\n    };\n\n    if (range.length) {\n      // IF is a list of the week dates\n      if (range.length === 7) {\n        // eslint-disable-next-line prefer-destructuring\n        temp.startDate = range[0];\n        // eslint-disable-next-line prefer-destructuring\n        temp.endDate = range[6];\n        temp.endDate.setHours(5);\n      } else { // IF it is a list of the current day\n        const date = range[0];\n        if (date < temp.startDate || date > temp.endDate) {\n          temp.startDate = getSundayDate(date);\n          temp.endDate = getEndOfWeek(date);\n        }\n      }\n    } else { // IF it is a range object\n      temp.startDate = range.start;\n      temp.endDate = range.end;\n      temp.endDate.setHours(5);\n    }\n\n    if (temp.startDate !== filterState.startDate && temp.endDate !== filterState.endDate) {\n      dispatch({ type: ActionType.UPDATE, payload: temp });\n    }\n  };\n\n  return (\n    <div className=\"calendarContainer\">\n      <Calendar\n        events={eventList}\n        localizer={localiser}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        views={\n          ['week', 'day', 'agenda']\n        }\n        defaultView=\"week\"\n        scrollToTime={currentDate}\n        min={am}\n        max={pm}\n        onRangeChange={dateChange}\n        onSelectEvent={(event: MyEvent, e): void => {\n          setSelectedEvent(event);\n          handleClick(e);\n        }}\n      />\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <EventView event={selectedEvent} />\n      </Popover>\n    </div>\n  );\n};\n\nexport default MyCalendar;\n","import React, { useState, useEffect, useContext } from 'react';\nimport MyCalendar from '../Calendar/Calendar';\nimport { getFilteredThisWeekExact } from '../../interface/api';\nimport FilterContext from '../Contexts/FilterContext';\nimport { MyEvent } from '../../interface/db-types';\n\n/**\n * CalendarWrapper is a functional component which recieves the query filter\n * then retrieves that data from the database and passes it onto the calendar view\n */\nconst CalendarWrapper: React.FC = () => {\n  const { filterState } = useContext(FilterContext);\n\n  const [events, setEvents] = useState<MyEvent[]>([]);\n\n  useEffect(() => {\n    getFilteredThisWeekExact(filterState).then((result) => {\n      if (result) {\n        const tempEvents = new Array<MyEvent>();\n        result.map((thing) => {\n          const tempEvent: MyEvent = {\n            allDay: false,\n            title: thing.title,\n            description: thing.description,\n            start: new Date(thing.startDate),\n            end: new Date(thing.endDate),\n            module: thing.module,\n            location: thing.location,\n            id: thing.id,\n          };\n          tempEvents.push(tempEvent);\n          return result;\n        });\n        setEvents(tempEvents);\n      }\n    });\n  }, [filterState]);\n\n  return (\n    <>\n      <MyCalendar eventList={events} />\n    </>\n  );\n};\n\nexport default CalendarWrapper;\n","import React, { useReducer } from 'react';\nimport './MainView.scss';\nimport FilterView from '../../components/Filter/Filter';\nimport CalendarWrapper from '../../components/CalendarWrapper/CalendarWrapper';\nimport FilterContext, { defaultFilter, reducer, init } from '../../components/Contexts/FilterContext';\n\nconst MainView: React.FC = () => {\n  const [filterState, dispatch] = useReducer(reducer, defaultFilter, init);\n\n  return (\n    <div className=\"MainView\">\n      <FilterContext.Provider value={{ filterState, dispatch }}>\n        <div className=\"filterHolder\">\n          <FilterView />\n        </div>\n        <CalendarWrapper />\n      </FilterContext.Provider>\n    </div>\n  );\n};\n\nexport default MainView;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport './Header.scss';\n\nconst Header: React.FC = () => (\n  <AppBar position=\"static\" className=\"header\">\n    <Toolbar className=\"toolbar\">\n      <Typography variant=\"h6\" className=\"title\">\n            WhatsUpKent\n      </Typography>\n      <Tooltip title=\"View on GitHub\" placement=\"left\">\n        <IconButton\n          href=\"https://github.com/jamesjarvis/WhatsUpKent-UI\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          <GitHubIcon />\n        </IconButton>\n      </Tooltip>\n    </Toolbar>\n  </AppBar>\n);\nexport default Header;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      main: '#444',\n    },\n    secondary: {\n      main: '#3949ab',\n    },\n  },\n});\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport './Footer.scss';\n\nconst Footer: React.FC = () => (\n  <footer className=\"footer\">\n    <span className=\"content\">\n      <Typography variant=\"caption\" gutterBottom>\n      a\n        {' '}\n        <a\n          href=\"https://jamesjarvis.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          James Jarvis\n          {' '}\n        </a>\n        {' '}\n      project\n      </Typography>\n    </span>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport './App.scss';\nimport { MuiThemeProvider } from '@material-ui/core';\nimport MainView from './pages/MainView/MainView';\nimport Header from './components/Header/Header';\nimport theme from './interface/theme';\nimport Footer from './components/Footer/Footer';\n\n\nconst App: React.FC = () => (\n  <Router>\n    <MuiThemeProvider theme={theme}>\n      <Header />\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={MainView} />\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </main>\n      <Footer />\n    </MuiThemeProvider>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}