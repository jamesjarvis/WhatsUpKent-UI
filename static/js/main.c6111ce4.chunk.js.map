{"version":3,"sources":["interface/utils.tsx","components/Contexts/FilterContext.tsx","components/EventView/EventView.tsx","components/Calendar/Calendar.tsx","interface/api.tsx","components/CalendarWrapper/CalendarWrapper.tsx","components/Filter/Filter.tsx","pages/MainView/MainView.tsx","components/Contexts/RoomFilterContext.tsx","components/RoomFilter/RoomFilter.tsx","components/RoomView/RoomView.tsx","components/RoomsView/RoomsView.tsx","pages/RoomFinder/RoomFinder.tsx","components/Header/Header.tsx","interface/theme.tsx","components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionType","getSundayDate","d","tempd","Date","setHours","setMinutes","setSeconds","day","getDay","diff","getDate","setDate","getEndOfWeek","spaceSeparatedList","as","temp","forEach","s","value","commaSeparatedStrings","i","length","formatTime","minutes","String","getMinutes","getHours","padStart","defaultFilter","startDate","endDate","subjects","Array","eventTypes","reducer","state","action","type","UPDATE","payload","init","initialFilter","FilterContext","createContext","EventView","event","calEvent","title","description","startTime","start","endTime","end","location","id","className","fontSize","module","name","subject","startString","toDateString","timeString","formatDateRangeString","buttonLabel","listItems","apple","google","outlook","outlookcom","Link","href","target","rel","split","map","index","rand","Math","random","key","localiser","momentLocalizer","moment","MyCalendar","eventList","useContext","filterState","dispatch","React","useState","anchorEl","setAnchorEl","open","Boolean","undefined","selectedEvent","setSelectedEvent","currentDate","now","am","pm","events","localizer","startAccessor","endAccessor","views","defaultView","scrollToTime","min","max","onRangeChange","range","date","onSelectEvent","e","currentTarget","handleClick","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","API_URL","f","a","moduleCodes","eventTerms","query","toISOString","axios","post","headers","response","body","data","filteredWeekView","mod","tempMod","code","tempEvent","push","thing","includes","availableLocations","CalendarWrapper","setEvents","useEffect","getFilteredThisWeekExact","then","result","tempEvents","allDay","FilterView","availableEventTypes","setAvailableEventTypes","tempSelectTypes","val","label","formatEventTypes","availableSubjectTypes","setAvailableSubjectTypes","getAllSubjects","tempSubTypes","formatSubjectTypes","onChange","selectedOption","options","placeholder","isMulti","MainView","useReducer","Typography","variant","Provider","availableHours","currentHour","setMilliseconds","getCurrentHour","endHour","hours","RoomFilterContext","RoomFilterView","RoomView","room","Paper","disabledAccess","Tooltip","placement","color","RoomsViewWrapper","rooms","setRooms","getRooms","RoomsView","RoomFinder","ListItemLink","props","icon","primary","to","renderLink","useMemo","forwardRef","itemProps","ref","innerRef","ListItem","button","component","ListItemIcon","ListItemText","Header","setOpen","toggleDrawer","drawerOpen","AppBar","position","Toolbar","IconButton","aria-label","onClick","edge","Drawer","List","createMuiTheme","palette","main","secondary","Footer","gutterBottom","App","theme","exact","path","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6111ce4.chunk.js","sourcesContent":["export function getSundayDate(d: Date): Date {\n  const tempd = new Date(d);\n  tempd.setHours(5);\n  tempd.setMinutes(0);\n  tempd.setSeconds(0);\n  const day = tempd.getDay();\n  const diff = tempd.getDate() - day;\n  return new Date(tempd.setDate(diff));\n}\n\nexport function getEndOfWeek(d: Date): Date {\n  const tempd = new Date(d);\n  tempd.setHours(5);\n  tempd.setMinutes(0);\n  tempd.setSeconds(0);\n  const day = tempd.getDay();\n  const diff = tempd.getDate() + (6 - day);\n  return new Date(tempd.setDate(diff));\n}\n\nexport function getCurrentHour(): Date {\n  const tempd = new Date();\n  tempd.setMinutes(0);\n  tempd.setSeconds(0);\n  tempd.setMilliseconds(0);\n  return tempd;\n}\n\nexport function spaceSeparatedList(as: Array<SelectValueType>): string {\n  let temp = '';\n  as.forEach((s) => {\n    temp = `${temp + s.value} `;\n  });\n  return temp;\n}\n\nexport function commaSeparatedStrings(as: Array<SelectValueType>): string {\n  let temp = '';\n  for (let i = as.length - 1; i >= 0; i -= 1) {\n    temp = `${temp}\"${as[i].value}\"`;\n    if (i !== 0) {\n      temp = `${temp},`;\n    }\n  }\n  return temp;\n}\n\nfunction formatTime(d: Date): string {\n  const minutes = String(d.getMinutes());\n  return `${d.getHours()}:${minutes.padStart(2, '0')}`;\n}\n\nexport function formatDateRangeString(\n  start: Date | undefined,\n  end: Date | undefined,\n): string {\n  if (!start || !end) {\n    return '';\n  }\n  const startString = start.toDateString();\n  const timeString = `${formatTime(start)} - ${formatTime(end)}`;\n  return `${startString} ⋅ ${timeString}`;\n}\n\nexport enum ActionType {\n  UPDATE,\n}\n\nexport interface SelectValueType {\n  label: string;\n  value: string;\n}\nexport interface Filter {\n  startDate: Date;\n  endDate: Date;\n  subjects: Array<SelectValueType>;\n  eventTypes: Array<SelectValueType>;\n}\n\nexport interface IntSelectValueType {\n  label: string;\n  value: number;\n}\nexport interface RoomFilterState {\n  startDate: Date;\n  endDate: Date;\n  hours: IntSelectValueType;\n}\n","import React, { createContext } from 'react';\nimport {\n  getSundayDate, getEndOfWeek, Filter, SelectValueType, ActionType,\n} from '../../interface/utils';\n\nexport const defaultFilter: Filter = {\n  startDate: getSundayDate(new Date()),\n  endDate: getEndOfWeek(new Date()),\n  subjects: new Array<SelectValueType>(),\n  eventTypes: new Array<SelectValueType>(),\n};\n\ninterface ReducerType {\n  payload: Filter;\n  type: ActionType;\n}\n\nexport const reducer = (state = defaultFilter, action: ReducerType) => {\n  switch (action.type) {\n    case ActionType.UPDATE:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport function init(initialFilter: Filter) {\n  return initialFilter;\n}\n\nconst FilterContext: React.Context<any> = createContext(defaultFilter);\n\nexport default FilterContext;\n","import React, { Fragment } from 'react';\nimport SubjectOutlinedIcon from '@material-ui/icons/SubjectOutlined';\nimport RoomOutlinedIcon from '@material-ui/icons/RoomOutlined';\nimport EventOutlinedIcon from '@material-ui/icons/EventOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport Link from '@material-ui/core/Link';\nimport AddToCalendar, { AddToCalendarEvent } from 'react-add-to-calendar';\nimport { MyEvent } from '../../interface/db-types';\nimport { formatDateRangeString } from '../../interface/utils';\nimport './EventView.scss';\nimport 'react-add-to-calendar/dist/react-add-to-calendar.css';\n\ninterface EventViewProps {\n  event: MyEvent;\n}\n\nfunction newlineToBreak(s: string | undefined): JSX.Element[] {\n  if (s) {\n    return s.split('\\\\n').map((value, index) => {\n      const rand = Math.random() * 100 * index;\n      return (\n        <Fragment key={rand}>\n          {value}\n          <br />\n        </Fragment>\n      );\n    });\n  }\n  return [];\n}\n\nconst EventView: React.FC<EventViewProps> = ({ event }) => {\n  const calEvent: AddToCalendarEvent = {\n    title: event.title,\n    description: event.description,\n    startTime: event.start,\n    endTime: event.end,\n    location: event.location && event.location[0].id,\n  };\n\n  return (\n    <div className=\"eventHolder\">\n      <div className=\"eventSection\">\n        <div className=\"eventSectionIcon\">\n          <InfoOutlinedIcon fontSize=\"small\" />\n        </div>\n        <div className=\"eventSectionDeepdive\">\n          <span className=\"bold1\">\n            {event.title}\n          </span>\n          <span className=\"quiet1\">\n            {event.module && event.module[0].name}\n          </span>\n          <span className=\"quiet2\">\n            {event.module && event.module[0].subject}\n          </span>\n        </div>\n      </div>\n      <div className=\"eventSection\">\n        <div className=\"eventSectionIcon\">\n          <EventOutlinedIcon fontSize=\"small\" />\n        </div>\n        <div className=\"eventSectionDeepdive\">\n          <span className=\"quiet1\">\n            {formatDateRangeString(event.start, event.end)}\n          </span>\n          <span>\n            <AddToCalendar\n              buttonLabel=\"Add to Calendar\"\n              event={calEvent}\n              listItems={[{ apple: 'Apple Calendar' }, { google: 'Google' }, { outlook: 'Outlook' }, { outlookcom: 'Outlook.com' }]}\n            />\n          </span>\n        </div>\n      </div>\n      <div className=\"eventSection\">\n        <div className=\"eventSectionIcon\">\n          <RoomOutlinedIcon fontSize=\"small\" />\n        </div>\n        <div className=\"eventSectionDeepdive\">\n          <span className=\"quiet1\">\n            <Link\n              href={`http://www.kent.ac.uk/timetabling/rooms/room.html?room=${event.location && event.location[0].id}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {event.location && event.location[0].id}\n            </Link>\n          </span>\n          <span className=\"quiet2\">\n            {event.location && event.location[0].name}\n          </span>\n        </div>\n      </div>\n      <div className=\"eventSection\">\n        <div className=\"eventSectionIcon\">\n          <SubjectOutlinedIcon fontSize=\"small\" />\n        </div>\n        <div className=\"eventSectionDeepdive\">\n          <div>\n            {newlineToBreak(event.description)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EventView;\n","import {\n  Calendar, momentLocalizer, Event,\n} from 'react-big-calendar';\nimport React, { useContext, useState } from 'react';\nimport moment from 'moment';\nimport Popover from '@material-ui/core/Popover';\nimport './Calendar.scss';\nimport FilterContext from '../Contexts/FilterContext';\nimport {\n  Filter, getSundayDate, getEndOfWeek, ActionType,\n} from '../../interface/utils';\nimport EventView from '../EventView/EventView';\nimport { MyEvent } from '../../interface/db-types';\n\nconst localiser = momentLocalizer(moment);\n\ninterface MyCalendarProps {\n  eventList: Event[];\n}\n\nconst MyCalendar: React.FC<MyCalendarProps> = ({ eventList }) => {\n  const { filterState, dispatch } = useContext(FilterContext);\n  const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n  const handleClick = (event: React.SyntheticEvent<HTMLElement>): void => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (): void => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  const [selectedEvent, setSelectedEvent] = useState<MyEvent | null>(null);\n\n  const currentDate = new Date(Date.now());\n  const am = new Date(Date.now());\n  am.setMinutes(0);\n  am.setSeconds(0);\n  am.setHours(7);\n  const pm = new Date(am);\n  pm.setHours(22);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const dateChange = (range: any): void => {\n    const temp: Filter = {\n      startDate: filterState.startDate,\n      endDate: filterState.endDate,\n      subjects: filterState.subjects,\n      eventTypes: filterState.eventTypes,\n    };\n\n    if (range.length) {\n      // IF is a list of the week dates\n      if (range.length === 7) {\n        // eslint-disable-next-line prefer-destructuring\n        temp.startDate = range[0];\n        // eslint-disable-next-line prefer-destructuring\n        temp.endDate = range[6];\n        temp.endDate.setHours(5);\n      } else { // IF it is a list of the current day\n        const date = range[0];\n        if (date < temp.startDate || date > temp.endDate) {\n          temp.startDate = getSundayDate(date);\n          temp.endDate = getEndOfWeek(date);\n        }\n      }\n    } else { // IF it is a range object\n      temp.startDate = range.start;\n      temp.endDate = range.end;\n      temp.endDate.setHours(5);\n    }\n\n    if (temp.startDate !== filterState.startDate && temp.endDate !== filterState.endDate) {\n      dispatch({ type: ActionType.UPDATE, payload: temp });\n    }\n  };\n\n  return (\n    <div className=\"calendarContainer\">\n      <Calendar\n        events={eventList}\n        localizer={localiser}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        views={\n          ['week', 'day', 'agenda']\n        }\n        defaultView=\"week\"\n        scrollToTime={currentDate}\n        min={am}\n        max={pm}\n        onRangeChange={dateChange}\n        onSelectEvent={(event: MyEvent, e): void => {\n          setSelectedEvent(event);\n          handleClick(e);\n        }}\n      />\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        {selectedEvent && <EventView event={selectedEvent} />}\n      </Popover>\n    </div>\n  );\n};\n\nexport default MyCalendar;\n","import axios from 'axios';\nimport {\n  getSundayDate, Filter, spaceSeparatedList, commaSeparatedStrings, RoomFilterState,\n} from './utils';\nimport { DBEvent, Module, Location } from './db-types';\n\nconst API_URL = 'https://api.whatsupkent.com/';\n// const API_URL = 'http://localhost:4000';\n\nexport async function getAllThisWeek(d: Date): Promise<DBEvent[] | null> {\n  const sundayDate = getSundayDate(d);\n  const saturdayDate = new Date(sundayDate);\n  saturdayDate.setDate(sundayDate.getDate() + 6);\n  const query = `\n  {\n    weekView(func: has(event.title), orderasc: event.start_date) @filter(gt(event.start_date,${sundayDate.toISOString().split('T')[0]}) and le(event.end_date, ${saturdayDate.toISOString().split('T')[0]})){\n      id: event.id\n      startDate: event.start_date\n      endDate: event.end_date\n      title: event.title\n      description: event.description\n      location: event.location {\n        id: location.id\n        name: location.name\n        disabledAccess: location.disabled_access\n      }\n      organiser: event.organiser {\n        name: person.name\n        email: person.email\n      }\n      module: event.part_of_module {\n        code: module.code\n        name: module.name\n        subject: module.subject\n      }\n    }\n  }\n  `;\n  try {\n    const response = await axios.post(API_URL, query);\n    const body: {weekView: Array<DBEvent>} = response.data;\n    return body.weekView;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getFilteredThisWeekExact(f: Filter): Promise<DBEvent[] | null> {\n  const moduleCodes = f.subjects.length > 0 ? `@filter(eq(module.subject, [${commaSeparatedStrings(f.subjects)}]))` : '';\n  const eventTerms = f.eventTypes.length > 0 ? `and anyofterms(event.title, \"${spaceSeparatedList(f.eventTypes)}\")` : '';\n  const query = `\n{filteredWeekView(func: has(module.subject), orderasc: module.subject, orderasc: module.code, first: 2000) ${moduleCodes}{\ncode: module.code\nsubject: module.subject\nname: module.name\nevents: ~event.part_of_module @filter(gt(event.start_date,${f.startDate.toISOString().split('T')[0]}) and le(event.end_date, ${f.endDate.toISOString().split('T')[0]}) ${eventTerms}) {\n  id: event.id\n  title: event.title\n  description: event.description\n  startDate: event.start_date\n  endDate: event.end_date\n  location: event.location {\n    name: location.name\n    id: location.id\n    disabledAccess: location.disabled_access\n}}}}\n  `;\n  try {\n    const response = await axios.post(API_URL, query, { headers: { 'Content-Type': 'application/json' } });\n    const body: {filteredWeekView: Array<Module>} = response.data;\n    const events = new Array<DBEvent>();\n    body.filteredWeekView.forEach((mod: Module) => {\n      if (mod.events) {\n        const tempMod: Module = {\n          code: mod.code,\n          name: mod.name,\n          subject: mod.subject,\n        };\n        mod.events.forEach((event) => {\n          const tempEvent = event;\n          tempEvent.module = [tempMod];\n          events.push(tempEvent);\n        });\n      }\n    });\n    return events;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getAllModules(): Promise<Module[] | null> {\n  const query = `\n  {\n    modules(func: has(module.subject), orderasc: module.subject, orderasc: module.code) {\n      subject: module.subject\n      code: module.code\n      name: module.name\n    }\n  }\n  `;\n  try {\n    const response = await axios.post(API_URL, query, { headers: { 'Content-Type': 'application/json' } });\n    const body: {modules: Array<Module>} = response.data;\n    return body.modules;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getAllSubjects(): Promise<string[] | null> {\n  const query = `\n  {subjects(func: has(module.subject), orderasc: module.subject, first: 4000){subject: module.subject}}`;\n  try {\n    const response = await axios.post(API_URL, query, { headers: { 'Content-Type': 'application/json' } });\n    const body: {subjects: Array<{subject: string}>} = response.data;\n    const temp = new Array<string>();\n    body.subjects.forEach((thing) => {\n      if (!temp.includes(thing.subject)) {\n        temp.push(thing.subject);\n      }\n    });\n    return temp;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getRooms(f: RoomFilterState): Promise<Array<Location> | null> {\n  const query = `\n  {\n    var(func: eq(event.start_date,\"${f.startDate.toISOString().split('T')[0]}\")) @filter(not (lt(event.start_date, \"${f.startDate.toISOString()}\")and le(event.end_date, \"${f.startDate.toISOString()}\"))or(ge(event.start_date,\"${f.endDate.toISOString()}\")and(gt(event.end_date,\"${f.endDate.toISOString()}\"))))  {\n      locations as event.location  { \n        location.id\n      }\n    }\n      \n    availableLocations(func: has(location.id), orderasc: location.id) @filter(not uid(locations)) {\n      id: location.id\n      name: location.name\n      disabledAccess: location.disabled_access\n    }\n  }\n  `;\n  try {\n    const response = await axios.post(API_URL, query, { headers: { 'Content-Type': 'application/json' } });\n    const body: {availableLocations: Array<Location>} = response.data;\n    return body.availableLocations;\n  } catch (error) {\n    return null;\n  }\n}\n\n\nexport function getAllLectureTypes(): Array<string> {\n  return ['LECTURE', 'SEMINAR', 'PRESENTATION', 'LAB', 'INDUCTION', 'PC', 'WORKSHOP', 'BOOKING', 'MEETING', 'PERFORMANCE', 'SCREENING', 'LECSEM', 'FIELDTRIP'];\n}\n","import React, { useState, useEffect, useContext } from 'react';\nimport MyCalendar from '../Calendar/Calendar';\nimport { getFilteredThisWeekExact } from '../../interface/api';\nimport FilterContext from '../Contexts/FilterContext';\nimport { MyEvent } from '../../interface/db-types';\n\n/**\n * CalendarWrapper is a functional component which recieves the query filter\n * then retrieves that data from the database and passes it onto the calendar view\n */\nconst CalendarWrapper: React.FC = () => {\n  const { filterState } = useContext(FilterContext);\n\n  const [events, setEvents] = useState<MyEvent[]>([]);\n\n  useEffect(() => {\n    getFilteredThisWeekExact(filterState).then((result) => {\n      if (result) {\n        const tempEvents = new Array<MyEvent>();\n        result.map((thing) => {\n          const tempEvent: MyEvent = {\n            allDay: false,\n            title: thing.title,\n            description: thing.description,\n            start: new Date(thing.startDate),\n            end: new Date(thing.endDate),\n            module: thing.module,\n            location: thing.location,\n            id: thing.id,\n          };\n          tempEvents.push(tempEvent);\n          return result;\n        });\n        setEvents(tempEvents);\n      }\n    });\n  }, [filterState]);\n\n  return (\n    <>\n      <MyCalendar eventList={events} />\n    </>\n  );\n};\n\nexport default CalendarWrapper;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Select from 'react-select';\nimport { getAllLectureTypes, getAllSubjects } from '../../interface/api';\nimport { Filter, SelectValueType, ActionType } from '../../interface/utils';\nimport './Filter.scss';\nimport FilterContext from '../Contexts/FilterContext';\n\ninterface GroupedSelectType {\n  label: string;\n  options: Array<SelectValueType>;\n}\n\nfunction formatEventTypes(eventTypes: Array<string>): Array<SelectValueType> {\n  const tempSelectTypes = new Array<SelectValueType>();\n  eventTypes.forEach((val) => {\n    tempSelectTypes.push({ value: val, label: val });\n  });\n  return tempSelectTypes;\n}\n\n/**\n * formatSubjectTypes formats the module database objects into the select types\n *\n * @param modules Information about all modules associated with the events\n */\nfunction formatSubjectTypes(subjects: Array<string>): Array<SelectValueType> {\n  const tempSubTypes = new Array<SelectValueType>();\n  subjects.forEach((val) => {\n    tempSubTypes.push({ value: val, label: val });\n  });\n  return tempSubTypes;\n}\n\nconst FilterView: React.FC = () => {\n  const { filterState, dispatch } = useContext(FilterContext);\n\n  const [availableEventTypes, setAvailableEventTypes] = useState();\n  useEffect(() => {\n    setAvailableEventTypes(formatEventTypes(getAllLectureTypes()));\n  }, []);\n\n  const handleTypeChange = (selectedOption: any) => {\n    const temp: Filter = {\n      startDate: filterState.startDate,\n      endDate: filterState.endDate,\n      subjects: filterState.subjects,\n      eventTypes: selectedOption || [],\n    };\n    dispatch({ type: ActionType.UPDATE, payload: temp });\n  };\n\n  const [availableSubjectTypes, setAvailableSubjectTypes] = useState();\n  useEffect(() => {\n    getAllSubjects().then((data) => {\n      if (data) {\n        setAvailableSubjectTypes(formatSubjectTypes(data));\n      }\n    });\n  }, []);\n\n  const handleSubjectChange = (selectedOption: any) => {\n    const temp: Filter = {\n      startDate: filterState.startDate,\n      endDate: filterState.endDate,\n      subjects: selectedOption || [],\n      eventTypes: filterState.eventTypes,\n    };\n    dispatch({ type: ActionType.UPDATE, payload: temp });\n  };\n\n  return (\n    <div className=\"filterView\">\n      <span>Show me</span>\n      <Select\n        value={filterState.eventTypes}\n        onChange={handleTypeChange}\n        options={availableEventTypes}\n        className=\"selector\"\n        placeholder=\"All\"\n        isMulti\n      />\n      <span>events for</span>\n      <Select\n        value={filterState.subjects}\n        onChange={handleSubjectChange}\n        options={availableSubjectTypes}\n        className=\"selector\"\n        placeholder=\"All subjects\"\n        isMulti\n      />\n    </div>\n  );\n};\n\nexport default FilterView;\n","import Typography from '@material-ui/core/Typography';\nimport React, { useReducer } from 'react';\nimport CalendarWrapper from '../../components/CalendarWrapper/CalendarWrapper';\nimport FilterContext, { defaultFilter, init, reducer } from '../../components/Contexts/FilterContext';\nimport FilterView from '../../components/Filter/Filter';\nimport './MainView.scss';\n\nconst MainView: React.FC = () => {\n  const [filterState, dispatch] = useReducer(reducer, defaultFilter, init);\n\n  return (\n    <div className=\"MainView\">\n      <div className=\"info\">\n        <Typography variant=\"body1\">\n          See everything going on at the\n          <a\n            href=\"https://www.kent.ac.uk/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {' '}\n            University of Kent\n          </a>\n          , without nagging all of your mates.\n        </Typography>\n      </div>\n      <FilterContext.Provider value={{ filterState, dispatch }}>\n        <div className=\"filterHolder\">\n          <FilterView />\n        </div>\n        <CalendarWrapper />\n      </FilterContext.Provider>\n    </div>\n  );\n};\n\nexport default MainView;\n","import { createContext } from 'react';\nimport {\n  getCurrentHour, RoomFilterState, ActionType, IntSelectValueType,\n} from '../../interface/utils';\n\n\nexport const availableHours: Array<IntSelectValueType> = [\n  { value: 1, label: '1' },\n  { value: 2, label: '2' },\n  { value: 3, label: '3' },\n  { value: 4, label: '4' },\n];\n\nconst currentHour = getCurrentHour();\nconst endHour = new Date(currentHour);\nendHour.setHours(currentHour.getHours() + availableHours[0].value);\nexport const defaultFilter: RoomFilterState = {\n  startDate: currentHour,\n  endDate: endHour,\n  hours: availableHours[0],\n};\n\ninterface ReducerType {\n  payload: RoomFilterState;\n  type: ActionType;\n}\n\nexport const reducer = (state = defaultFilter, action: ReducerType): RoomFilterState => {\n  switch (action.type) {\n    case ActionType.UPDATE:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport function init(initialFilter: RoomFilterState): RoomFilterState {\n  return initialFilter;\n}\n\nconst RoomFilterContext = createContext<any>(defaultFilter);\n\nexport default RoomFilterContext;\n","import Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport './RoomFilter.scss';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface RoomFilterProps {\n  // hourOptions: Array<IntSelectValueType>;\n}\n\nconst RoomFilterView: React.FC<RoomFilterProps> = () => (\n  // {\n  // hourOptions,\n  // }\n  // const { filterState, dispatch } = useContext(RoomFilterContext);\n\n  // const handleHoursChange = (selectedOption: any) => {\n  //   const temp = filterState;\n  //   temp.hours = selectedOption;\n  //   temp.endDate.setHours(temp.startDate.getHours() + temp.hours.value);\n  //   dispatch({ type: ActionType.UPDATE, payload: temp });\n  // };\n\n  <div className=\"roomFilterView\">\n    {/* <span>I need a room right now, for</span>\n      <Select value={filterState.hours} onChange={handleHoursChange} options={hourOptions} className=\"selector\" />\n      <span>hours</span> */}\n    <Typography variant=\"body1\">\n      Showing all rooms available for the next hour\n    </Typography>\n  </div>\n);\nexport default RoomFilterView;\n","import Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport AccessibleIcon from '@material-ui/icons/Accessible';\nimport React from 'react';\nimport { Location } from '../../interface/db-types';\nimport './RoomView.scss';\n\ninterface RoomViewProps {\n  room: Location;\n}\n\nconst RoomView: React.FC<RoomViewProps> = ({ room }) => (\n\n  <Paper className=\"location\">\n    <span className=\"locationSection\">\n      <Link\n        href={`http://www.kent.ac.uk/timetabling/rooms/room.html?room=${room.id}`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Typography variant=\"h5\">\n          {room.id}\n        </Typography>\n      </Link>\n      {room.disabledAccess\n      && (\n        <Tooltip title=\"This room is accessible\" placement=\"right\">\n          <AccessibleIcon color=\"secondary\" />\n        </Tooltip>\n      )}\n    </span>\n    <span className=\"locationSection\">\n      <Typography variant=\"body2\">\n        {room.name}\n      </Typography>\n    </span>\n  </Paper>\n);\n\nexport default RoomView;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { Location } from '../../interface/db-types';\nimport RoomView from '../RoomView/RoomView';\nimport './RoomsView.scss';\nimport RoomFilterContext from '../Contexts/RoomFilterContext';\nimport { getRooms } from '../../interface/api';\n\nexport const RoomsViewWrapper: React.FC = () => {\n  const { filterState } = useContext(RoomFilterContext);\n\n  const [rooms, setRooms] = useState<Array<Location>>([]);\n\n  useEffect(() => {\n    getRooms(filterState).then((result) => {\n      if (result) {\n        setRooms(result);\n      }\n    });\n  }, [filterState]);\n\n  return (\n    <RoomsView rooms={rooms} />\n  );\n};\n\n\ninterface RoomsViewProps {\n  rooms: Array<Location>;\n}\n\nconst RoomsView: React.FC<RoomsViewProps> = ({ rooms }) => (\n  <div className=\"roomsView\">\n    {rooms.map((value, index) => {\n      const rand = Math.random() * 100 * index;\n      return (\n        <RoomView room={value} key={rand} />);\n    })}\n  </div>\n);\n\nexport default RoomsView;\n","import Typography from '@material-ui/core/Typography';\nimport React, { useReducer } from 'react';\nimport RoomFilterContext, { defaultFilter, init, reducer } from '../../components/Contexts/RoomFilterContext';\nimport RoomFilterView from '../../components/RoomFilter/RoomFilter';\nimport { RoomsViewWrapper } from '../../components/RoomsView/RoomsView';\nimport './RoomFinder.scss';\n\n\nconst RoomFinder: React.FC = () => {\n  const [filterState, dispatch] = useReducer(reducer, defaultFilter, init);\n\n  return (\n    <div className=\"roomView\">\n      <div className=\"info\">\n        <Typography variant=\"body1\">Need a room? Find a room.</Typography>\n      </div>\n      <RoomFilterContext.Provider value={{ filterState, dispatch }}>\n        <div className=\"filterHolder\">\n          <RoomFilterView />\n        </div>\n        <RoomsViewWrapper />\n      </RoomFilterContext.Provider>\n    </div>\n  );\n};\n\nexport default RoomFinder;\n","import AppBar from '@material-ui/core/AppBar';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport MeetingRoomIcon from '@material-ui/icons/MeetingRoom';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport TodayIcon from '@material-ui/icons/Today';\nimport React, { useState } from 'react';\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom';\nimport './Header.scss';\n\ninterface ListItemLinkProps {\n  icon?: React.ReactElement;\n  primary: string;\n  to: string;\n}\n\nfunction ListItemLink(props: ListItemLinkProps) {\n  const { icon, primary, to } = props;\n\n  const renderLink = React.useMemo(\n    () => React.forwardRef<\n    HTMLAnchorElement,\n    Omit<RouterLinkProps, 'innerRef' | 'to'>\n    >((itemProps, ref) => (\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      <RouterLink to={to} {...itemProps} innerRef={ref} />\n    )),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink}>\n        {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\n        <ListItemText primary={primary} />\n      </ListItem>\n    </li>\n  );\n}\n\nconst Header: React.FC = () => {\n  const [open, setOpen] = useState(false);\n  const toggleDrawer = (drawerOpen: boolean) => (\n    event: React.KeyboardEvent | React.MouseEvent,\n  ) => {\n    if (\n      event.type === 'keydown'\n      && ((event as React.KeyboardEvent).key === 'Tab'\n        || (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    setOpen(drawerOpen);\n  };\n  return (\n    <>\n      <AppBar position=\"static\" className=\"header\">\n        <Toolbar className=\"toolbar\">\n          <span className=\"mainText\">\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={toggleDrawer(true)}\n              edge=\"start\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className=\"title\">\n              WhatsUpKent\n            </Typography>\n          </span>\n          <Tooltip title=\"View on GitHub\" placement=\"left\">\n            <IconButton\n              href=\"https://github.com/jamesjarvis/WhatsUpKent-UI\"\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              <GitHubIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <Drawer open={open} onClose={toggleDrawer(false)}>\n        <List>\n          <ListItemLink to=\"/\" primary=\"All Events\" icon={<TodayIcon />} />\n          <ListItemLink\n            to=\"/rooms\"\n            primary=\"Free Room Finder\"\n            icon={<MeetingRoomIcon />}\n          />\n        </List>\n      </Drawer>\n    </>\n  );\n};\nexport default Header;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      main: '#444',\n    },\n    secondary: {\n      main: '#3949ab',\n    },\n  },\n});\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport './Footer.scss';\n\nconst Footer: React.FC = () => (\n  <footer className=\"footer\">\n    <span className=\"content\">\n      <Typography variant=\"caption\" gutterBottom>\n      a\n        {' '}\n        <a\n          href=\"https://jamesjarvis.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          James Jarvis\n          {' '}\n        </a>\n        {' '}\n      project\n      </Typography>\n    </span>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport './App.scss';\nimport { MuiThemeProvider } from '@material-ui/core';\nimport MainView from './pages/MainView/MainView';\nimport RoomFinder from './pages/RoomFinder/RoomFinder';\nimport Header from './components/Header/Header';\nimport theme from './interface/theme';\nimport Footer from './components/Footer/Footer';\n\n\nconst App: React.FC = () => (\n  <Router>\n    <MuiThemeProvider theme={theme}>\n      <Header />\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={MainView} />\n          <Route exact path=\"/rooms\" component={RoomFinder} />\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </main>\n      <Footer />\n    </MuiThemeProvider>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}